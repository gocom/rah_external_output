h1. rah_external_output

p. Rah_external_output is a "Textpattern":http://textpattern.com plugin that can be used create custom content-type snippets. These snippets can be requested with a publicly accessible URL, and used as pages or to provide site's content over in form of JSON or XML to JavaScript or across domains.

p. While these snippets can act as pages, they independent from Textpattern's normal content model. Snippets won't required or overpopulate "page templates":http://textpattern.net/wiki/index.php?title=Pages or "sections":http://textpattern.net/wiki/index.php?title=Sections.

p. This makes the plugin ideal for generating various publicly accessible snippets, including XML feeds or JavaScript Object Notations that can be then used to feed site's content to JavaScript applications, build application layers or to transmit content across domains.

p. Rah_external_output uses Textpattern's "form partials":http://textpattern.net/wiki/index.php?title=Forms to power its snippets. A form partial that's name is prefixed with @rah_eo_@ can be accessed directly with a URL, creating its own, independed page. The term _external_ directly refers to separateness and independency from sections and page templates while still serving client-side content.

h2. List of features

* "Form partials":http://textpattern.net/wiki/index.php?title=Forms prefixed with @rah_eo_@ can be requested, and their output accessed, directly using a public URL.
* In addition to normal form partials, these special forms, snippets, can contain HTTP header lines. Lines at the beginning of the form staring with a semicolon are treated as headers.
* Form partials can be served using different content-type by appending file extension to the name.

h2. Requirements

p. Rah_external_output's minimum requirements:

* Textpattern v4.4.1 or newer.
* PHP5 or newer.

h2. Installing

p. The general behavior stands when it comes to installing rah_external_ouput. No extra steps or configuration that variates from normal is needed.

# Download plugin installation file and copy its contents to clipboard.
# Navigate to "Plugins":http://textpattern.net/wiki/index.php?title=Plugins panel and paste the copied code into the _Install plugin_ field, and click *Upload*.
# You will be shown a preview of the plugin and its documentation. Click *Install* at the bottom of the page.
# You will be returned to the plugin list when the plugin has been installed. Now activate the plugin by clicking its *No* link, which toggles the status to *Yes* and actives it.
# The plugin is now installed and activated. All done.

h2. Basics

p. Rah_external_output treats misc type "form partials":http://textpattern.net/wiki/index.php?title=Forms that names are prefixed with @rah_eo_@ prefix as a "external" content-type snippets. These special prefixed forms can be accessed using a public callback URL. This URL follows a pattern:

bc. http://example.com/?rah_external_output=FormNameWithoutPrefix

p. Where @example.com@ is the site's URL and @FormNameWithoutPrefix@ is the form's name excluding the prefix. The above URL would output a misc form named @rah_eo_FormNameWithoutPrefix@.

h2. Creating your first snippet

p. Creating a new rah_external_output's custom form, a snippet. would follow the same steps as "any other form":http://textpattern.net/wiki/index.php?title=Forms#Creating_a_New_Form. Go to Forms panel, located under "Presentation":http://textpattern.net/wiki/index.php?title=Presentation section, and click the _Create new form_ button at the top of the column on the right. This will open a new empty editor.

p. As with any form partial, you can type in any Textpattern markup you wish to the large code field. This is what your snippet will output when accessed using its URL. For now, type in the field this:

bc. ; Content-type: text/plain
<<txp:site_name /> says> Hello World!

p. You can then give the snippet a name by typing in it in the _Name_ field. This name will be also used for the snippet's URL. To register a form partial as a rah_external_output's snippet, the name should be prefixed with @rah_eo_@. For now, give the form a name @rah_eo_hello_world@.

p. Last but not least is a _Type_. The most appropriate type for a snippet is a _misc_, but it can be anything if you so wish. Form types are for the most part visual, used for organizing things on the admin-side, from _Write_ panel's _Output form_ field to the _Tag Builder_.

p. When you have done with the code, giving it a name and selecting type, hit _Save_ button. The snippet is now ready for being accessed. After you have saved the editor, you will notice that there is a _View_ link next to the _Name_ field. By clicking the link you will be taken to the snippet's generated page.

p. That page is the snippets publicly accessible URL, which you can freely use as a page, to serve content to applications and use in client-side scripts. For the snippet named @rah_eo_hello_world@ you just created, this URL would be:

bc. http://example.com/?rah_external_output=hello_world

p. Where @example.com@ is your site's URL and @hello_world@ the name of the snippet. When accessing the snippet, you should see following output:

bc. <MySiteName says> Hello World!

p. Where @MySiteName@ is the name of the site. As you notice the, the page is served as a plain text opposed to HTML. This is due to a HTTP header line the snippet's code included:

bc. ; Content-type: text/plain

p. All rah_external_output's snippets support few unique features including custom HTTP header lines and file extensions.

h2. Custom HTTP headers

p. In addition to a form partial's normal features, rah_external_output's special forms, snippets, support sending custom HTTP headers, including a content-type header.

p. All lines at the beginning of the form starting with a semicolon (@;@) are sent as HTTP headers. These lines should be placed at the very beginning of a form, starting from the first line. HTTP header lines can not be preceded by any white-space or empty lines.

p. HTTP header lines follow the normal syntax you would expect from a HTTP header field definitions. A line consist of header property, also commonly referred as a field, followed by a colon (@:@) and a value.

bc. ; Property: Value

p. A form supports unlimited number of header lines. Each subsequent line starting with a semicolon is sent as a HTTP header.

bc. ; Content-type: text/javascript
; Cache-Control: no-store, no-cache, must-revalidate, pre-check=0, post-check=0, max-age=0
; Expires: Sat, 24 Jul 2003 05:00:00 GMT
; Last-Modified: Wed, 1 Jan 2025 05:00:00 GMT
; Pragma: no-cache

p. Using these HTTP header lines visitor can be redirected, or document's content-type, encoding, caching or timestamp attributes changed. A form that starts with a following header line would be sent as a plain-text:

bc.. ; Content-type: text/plain

<txp:article_custom limit="15">
	<txp:permlink><txp:title /></txp:permlink>
</txp:article_custom>

p. Note that for security reasons HTTP header lines can not contain Textpattern tags. Headers are collected from the source code before any Textpattern tags are processed. This to prevent any type of header injections that could occur otherwise.

h2. Content-types and file extensions

p. In addition to custom HTTP headers, a snippet's content-type can be set using a file extension, appended to the form's name. Supported extensions are @.json@, @.js@, @.xml@, @.css@, @.txt@ and @.html@.

p. If a form is named as a @rah_eo_jsontable.json@, the snippet would be served as a JSON presentation when @http://example.com/?rah_external_output=jsontable.json@ is accessed.

h2. Tag trace and debugging

p. As Textpattern's normal page templates, rah_external_output's snippets support "tag traces":http://textpattern.net/wiki/index.php?title=tag_trace. In "debugging mode":http://textpattern.net/wiki/index.php?title=Basic_Preferences#Production_Status, a tag trace is appended to the HTML output of each snippet that ends with a @.html@ extension. As a tag trace on a normal page, the trace tells you which Textpattern tags are being executed and their outcome.

h2. Example uses and snippets

p. As the plugin can be used to serve any type of snippet and content there is no to say what you should do with it or not. To give out a simple idea how you could benefit from the plugin, please see our "examples directory on GitHub":https://github.com/gocom/rah_external_output/tree/master/examples. The directory contains some basic, yet real-world proof examples. Includes XML sitemap generation and some JSON building.

h2. For developers

p. The plugin comes with couple things targeted to developers.

h3. Callback

p. One of these is a dedicated callback event which is fired when a snippet is viewed. The callback in question is named @rah_external_output.snippet_end@ and is executed at the very end of a snippet. This callback can be used like any other Textpattern callback event. Hooking to the event happens using @register_callback()@ function.

bc. register_callback(callback, 'rah_external_output.snippet_end');

p. Please see "Plugin Basic":http://textpattern.net/wiki/index.php?title=Plugin_basics for more information about plugin development and callbacks.

h3. File extensions

p. There is also a global variable that can be used to add extra recognized MIME types to the stack of file extensions. The variable is named @$rah_external_output_mime@ and takes an array map of @extension => mime/type@ key-value pairs.

bc. global $rah_external_output_mime;
$rah_external_output_mime['png'] = 'image/png';
$rah_external_output_mime['svg'] = 'image/svg+xml';

h2. Changelog

h3. Version 1.0 - upcoming

* Removed: Plugin's own user interface. The plugin now uses @rah_eo_@ prefixed form partials and integrates with Forms panel.
* Removed: @<txp:rah_external_output />@ tag. As forms are used, normal and more flexible "output_form":http://textpattern.net/wiki/index.php?title=output_form tag can be used.
* Removed: Raw PHP support to comply with "r3706.":http://code.google.com/p/textpattern/source/detail?r=3706
* Added: Ability to set a snippet's content-type using a file extension in the name.
* Added: Migration assistant script. The script is run automatically on install and migrates rah_external_output snippets from the old interface to Forms.
* Added: @rah_external_output.snippet_end@ callback event for developers.
* Changed: Returns a 404 page instead of the home page when requesting a nonexistent snippet.
* Changed: "Tag trace":http://textpattern.net/wiki/index.php?title=tag_trace can no longer be controlled using a URL parameter. A tag trace is added when the snippet name has a @.html@ extension and the site is in debugging mode.
* Now requires PHP5 or newer.
* Compatibility with Textpattern v4.5.0.

h3. Version 0.9 - 2011/09/03

* Fixed: now handles raw PHP tags.
* Changed: now parses tag structure in same fashion as core. Do it twice. Provides identical results with core in every scenario.
* Added: ability to display tag trace, and error reporting, by adding @rah_external_output_trace@ parameter (@&rah_external_output_trace=1@) to the snippet URL when site's production status is set to _debugging_.

h3. Version 0.8 - 2011/07/26

* Added: CSRF (session riding) protection using Textpattern's core functions introduced in v4.4.1.
* Changed: Make sure the plugin interfaces is all in one language.
* Changed: Only try to drop old database tables when humanly possible that there is old leftovers. Don't run queries when updating from clean to clean.
* Changed: set temporary version number when installing. Removes the possibility of running the installer twice for no reason.
* Now requires Textpattern version 4.4.1 or newer.

h3. Version 0.7 - 2011/06/12

* Fixed: Error in @<txp:rah_external_output />@ tag.
* Fixed: Closed open @<thead>@ tag in the main list view.
* Fixed: Now admin-side page title uses language strings.

h3. Version 0.6 - 2011/04/15

* Fixed: Saving snippets while changing name.
* Fixed: Now keeps the sent data in the editor if error occurs during saving instead of fetching the old data from the database.
* Added: Translation support. Interface now uses language strings.
* Added: @<txp:rah_external_output />@ tag now caches fetched results.
* Added: Now uses plugin_lifecycle callbacks, and includes uninstaller.
* Added: Adds an options link to the Plugins pane which directs to the plugin's admin-interface.
* Removed: Mime-interface. Was confusing and not so many used it. Trying to simplify the user interface.
* Changed: The user-interface and markup. Removed heading, removed inline styles, added @<tbody>@ and @<thead>@ tags to the tables.
* Changed: Now uses new, improved multi-selection/edit feature, seen in other rah-plugins.
* Changed: now uses @textpattern@ callback instead of outputting the snippets right away when the plugin is loaded.
* Changed: Now checks if the saving/updating succeeds, instead of expecting.
* Now requires Textpattern 4.2.0 (or newer) for full feature compatibility.

h3. Version 0.5 - 2010/04/11

* Added _disable_ and _activate_ actions to multiedit feature.

h3. Version 0.4 - 2009/06/08

* Fixed forgotten insert query escaping.

h3. Version 0.3 - 2009/05/10

* Fixed error caused by non-set @$pretext@ (note: TXP load order).
* Set @$pretext@ indexes to empty: we are not on page template.

h3. Version 0.2 - 2009/05/09

* Fixed forgotten parse call.

h3. Version 0.1 - 2009/05/09

* Initial release.